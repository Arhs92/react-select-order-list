'use strict';

exports.__esModule = true;

var _immutable = require('immutable');

var _reactSortableHoc = require('react-sortable-hoc');

var escapeRegExp = /[-\\^$*+?.()|[\]{}]/g;
var escapeKeyword = function escapeKeyword(keyword) {
  return keyword.replace(escapeRegExp, '\\$&');
};

exports.default = {
  getAvailableDataList: function getAvailableDataList(availableData, selectedData) {
    return availableData.map(function (item, ind) {
      var isLocked = item.isLocked,
          label = item.label,
          value = item.value;

      var isSelected = selectedData.findIndex(function (i) {
        return i.value === value;
      }) !== -1;
      var sort = ind + 1;
      return {
        isLocked: isLocked,
        isSelected: isSelected,
        label: label,
        sort: sort,
        value: value
      };
    });
  },

  getSelectedDataList: function getSelectedDataList(selectedData) {
    return selectedData.map(function (item, ind) {
      var isLocked = item.isLocked,
          label = item.label,
          value = item.value;

      var sort = ind + 1;
      return {
        isLocked: isLocked,
        label: label,
        sort: sort,
        value: value
      };
    });
  },

  changeDataSort: function changeDataSort(dataList, oldIndex, newIndex) {
    var data = dataList.toJS();
    var changeOverLockedItems = false;
    if (oldIndex + 1 < newIndex) {
      for (var i = oldIndex; i < newIndex; i += 1) {
        if (data[i] && data[i].isLocked) {
          changeOverLockedItems = true;
        }
      }
    }
    if (oldIndex > newIndex + 1) {
      for (var _i = oldIndex; _i > newIndex; _i -= 1) {
        if (data[_i] && data[_i].isLocked) {
          changeOverLockedItems = true;
        }
      }
    }
    var sortedData = [];
    if (changeOverLockedItems) {
      // Swap items if sorting is done over locked item to keep it in place
      var _i2 = void 0;
      _i2 = data.length;
      while (_i2 > 0) {
        _i2 -= 1;
        sortedData[_i2] = data[_i2];
      }
      sortedData[oldIndex] = data[newIndex];
      sortedData[newIndex] = data[oldIndex];
    } else {
      // Normal sorting move all other items up/down
      sortedData = (0, _reactSortableHoc.arrayMove)(data, oldIndex, newIndex);
    }
    return (0, _immutable.List)(sortedData);
  },

  filterData: function filterData(data, keyword) {
    var filteredData = void 0;
    if (keyword !== '') {
      var regexp = new RegExp(escapeKeyword(keyword), 'i');
      filteredData = data.filter(function (i) {
        return regexp.test(i.label);
      });
    } else {
      filteredData = data;
    }
    return filteredData;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhLnV0aWxzLmpzIl0sIm5hbWVzIjpbImVzY2FwZVJlZ0V4cCIsImVzY2FwZUtleXdvcmQiLCJrZXl3b3JkIiwicmVwbGFjZSIsImdldEF2YWlsYWJsZURhdGFMaXN0IiwiYXZhaWxhYmxlRGF0YSIsInNlbGVjdGVkRGF0YSIsIm1hcCIsIml0ZW0iLCJpbmQiLCJpc0xvY2tlZCIsImxhYmVsIiwidmFsdWUiLCJpc1NlbGVjdGVkIiwiZmluZEluZGV4IiwiaSIsInNvcnQiLCJnZXRTZWxlY3RlZERhdGFMaXN0IiwiY2hhbmdlRGF0YVNvcnQiLCJkYXRhTGlzdCIsIm9sZEluZGV4IiwibmV3SW5kZXgiLCJkYXRhIiwidG9KUyIsImNoYW5nZU92ZXJMb2NrZWRJdGVtcyIsInNvcnRlZERhdGEiLCJsZW5ndGgiLCJmaWx0ZXJEYXRhIiwiZmlsdGVyZWREYXRhIiwicmVnZXhwIiwiUmVnRXhwIiwiZmlsdGVyIiwidGVzdCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUVBLElBQU1BLGVBQWUsc0JBQXJCO0FBQ0EsSUFBTUMsZ0JBQWdCLFNBQWhCQSxhQUFnQjtBQUFBLFNBQVdDLFFBQVFDLE9BQVIsQ0FBZ0JILFlBQWhCLEVBQThCLE1BQTlCLENBQVg7QUFBQSxDQUF0Qjs7a0JBRWU7QUFDYkksd0JBQXNCLDhCQUFDQyxhQUFELEVBQWdCQyxZQUFoQjtBQUFBLFdBQ3BCRCxjQUFjRSxHQUFkLENBQWtCLFVBQUNDLElBQUQsRUFBT0MsR0FBUCxFQUFlO0FBQUEsVUFDdkJDLFFBRHVCLEdBQ0lGLElBREosQ0FDdkJFLFFBRHVCO0FBQUEsVUFDYkMsS0FEYSxHQUNJSCxJQURKLENBQ2JHLEtBRGE7QUFBQSxVQUNOQyxLQURNLEdBQ0lKLElBREosQ0FDTkksS0FETTs7QUFFL0IsVUFBTUMsYUFBYVAsYUFBYVEsU0FBYixDQUF1QjtBQUFBLGVBQUtDLEVBQUVILEtBQUYsS0FBWUEsS0FBakI7QUFBQSxPQUF2QixNQUFtRCxDQUFDLENBQXZFO0FBQ0EsVUFBTUksT0FBT1AsTUFBTSxDQUFuQjtBQUNBLGFBQU87QUFDTEMsMEJBREs7QUFFTEcsOEJBRks7QUFHTEYsb0JBSEs7QUFJTEssa0JBSks7QUFLTEo7QUFMSyxPQUFQO0FBT0QsS0FYRCxDQURvQjtBQUFBLEdBRFQ7O0FBZ0JiSyx1QkFBcUI7QUFBQSxXQUNuQlgsYUFBYUMsR0FBYixDQUFpQixVQUFDQyxJQUFELEVBQU9DLEdBQVAsRUFBZTtBQUFBLFVBQ3RCQyxRQURzQixHQUNLRixJQURMLENBQ3RCRSxRQURzQjtBQUFBLFVBQ1pDLEtBRFksR0FDS0gsSUFETCxDQUNaRyxLQURZO0FBQUEsVUFDTEMsS0FESyxHQUNLSixJQURMLENBQ0xJLEtBREs7O0FBRTlCLFVBQU1JLE9BQU9QLE1BQU0sQ0FBbkI7QUFDQSxhQUFPO0FBQ0xDLDBCQURLO0FBRUxDLG9CQUZLO0FBR0xLLGtCQUhLO0FBSUxKO0FBSkssT0FBUDtBQU1ELEtBVEQsQ0FEbUI7QUFBQSxHQWhCUjs7QUE2QmJNLGtCQUFnQix3QkFBQ0MsUUFBRCxFQUFXQyxRQUFYLEVBQXFCQyxRQUFyQixFQUFrQztBQUNoRCxRQUFNQyxPQUFPSCxTQUFTSSxJQUFULEVBQWI7QUFDQSxRQUFJQyx3QkFBd0IsS0FBNUI7QUFDQSxRQUFJSixXQUFXLENBQVgsR0FBZUMsUUFBbkIsRUFBNkI7QUFDM0IsV0FBSyxJQUFJTixJQUFJSyxRQUFiLEVBQXVCTCxJQUFJTSxRQUEzQixFQUFxQ04sS0FBSyxDQUExQyxFQUE2QztBQUMzQyxZQUFJTyxLQUFLUCxDQUFMLEtBQVdPLEtBQUtQLENBQUwsRUFBUUwsUUFBdkIsRUFBaUM7QUFDL0JjLGtDQUF3QixJQUF4QjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFFBQUlKLFdBQVdDLFdBQVcsQ0FBMUIsRUFBNkI7QUFDM0IsV0FBSyxJQUFJTixLQUFJSyxRQUFiLEVBQXVCTCxLQUFJTSxRQUEzQixFQUFxQ04sTUFBSyxDQUExQyxFQUE2QztBQUMzQyxZQUFJTyxLQUFLUCxFQUFMLEtBQVdPLEtBQUtQLEVBQUwsRUFBUUwsUUFBdkIsRUFBaUM7QUFDL0JjLGtDQUF3QixJQUF4QjtBQUNEO0FBQ0Y7QUFDRjtBQUNELFFBQUlDLGFBQWEsRUFBakI7QUFDQSxRQUFJRCxxQkFBSixFQUEyQjtBQUN6QjtBQUNBLFVBQUlULFlBQUo7QUFDQUEsWUFBSU8sS0FBS0ksTUFBVDtBQUNBLGFBQU9YLE1BQUksQ0FBWCxFQUFjO0FBQ1pBLGVBQUssQ0FBTDtBQUNBVSxtQkFBV1YsR0FBWCxJQUFnQk8sS0FBS1AsR0FBTCxDQUFoQjtBQUNEO0FBQ0RVLGlCQUFXTCxRQUFYLElBQXVCRSxLQUFLRCxRQUFMLENBQXZCO0FBQ0FJLGlCQUFXSixRQUFYLElBQXVCQyxLQUFLRixRQUFMLENBQXZCO0FBQ0QsS0FWRCxNQVVPO0FBQ0w7QUFDQUssbUJBQWEsaUNBQVVILElBQVYsRUFBZ0JGLFFBQWhCLEVBQTBCQyxRQUExQixDQUFiO0FBQ0Q7QUFDRCxXQUFPLHFCQUFLSSxVQUFMLENBQVA7QUFDRCxHQTlEWTs7QUFnRWJFLGNBQVksb0JBQUNMLElBQUQsRUFBT3BCLE9BQVAsRUFBbUI7QUFDN0IsUUFBSTBCLHFCQUFKO0FBQ0EsUUFBSTFCLFlBQVksRUFBaEIsRUFBb0I7QUFDbEIsVUFBTTJCLFNBQVMsSUFBSUMsTUFBSixDQUFXN0IsY0FBY0MsT0FBZCxDQUFYLEVBQW1DLEdBQW5DLENBQWY7QUFDQTBCLHFCQUFlTixLQUFLUyxNQUFMLENBQVk7QUFBQSxlQUFLRixPQUFPRyxJQUFQLENBQVlqQixFQUFFSixLQUFkLENBQUw7QUFBQSxPQUFaLENBQWY7QUFDRCxLQUhELE1BR087QUFDTGlCLHFCQUFlTixJQUFmO0FBQ0Q7QUFDRCxXQUFPTSxZQUFQO0FBQ0Q7QUF6RVksQyIsImZpbGUiOiJkYXRhLnV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGlzdCB9IGZyb20gJ2ltbXV0YWJsZSc7XHJcbmltcG9ydCB7IGFycmF5TW92ZSB9IGZyb20gJ3JlYWN0LXNvcnRhYmxlLWhvYyc7XHJcblxyXG5jb25zdCBlc2NhcGVSZWdFeHAgPSAvWy1cXFxcXiQqKz8uKCl8W1xcXXt9XS9nO1xyXG5jb25zdCBlc2NhcGVLZXl3b3JkID0ga2V5d29yZCA9PiBrZXl3b3JkLnJlcGxhY2UoZXNjYXBlUmVnRXhwLCAnXFxcXCQmJyk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgZ2V0QXZhaWxhYmxlRGF0YUxpc3Q6IChhdmFpbGFibGVEYXRhLCBzZWxlY3RlZERhdGEpID0+IChcclxuICAgIGF2YWlsYWJsZURhdGEubWFwKChpdGVtLCBpbmQpID0+IHtcclxuICAgICAgY29uc3QgeyBpc0xvY2tlZCwgbGFiZWwsIHZhbHVlIH0gPSBpdGVtO1xyXG4gICAgICBjb25zdCBpc1NlbGVjdGVkID0gc2VsZWN0ZWREYXRhLmZpbmRJbmRleChpID0+IGkudmFsdWUgPT09IHZhbHVlKSAhPT0gLTE7XHJcbiAgICAgIGNvbnN0IHNvcnQgPSBpbmQgKyAxO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlzTG9ja2VkLFxyXG4gICAgICAgIGlzU2VsZWN0ZWQsXHJcbiAgICAgICAgbGFiZWwsXHJcbiAgICAgICAgc29ydCxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgfTtcclxuICAgIH0pXHJcbiAgKSxcclxuXHJcbiAgZ2V0U2VsZWN0ZWREYXRhTGlzdDogc2VsZWN0ZWREYXRhID0+IChcclxuICAgIHNlbGVjdGVkRGF0YS5tYXAoKGl0ZW0sIGluZCkgPT4ge1xyXG4gICAgICBjb25zdCB7IGlzTG9ja2VkLCBsYWJlbCwgdmFsdWUgfSA9IGl0ZW07XHJcbiAgICAgIGNvbnN0IHNvcnQgPSBpbmQgKyAxO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGlzTG9ja2VkLFxyXG4gICAgICAgIGxhYmVsLFxyXG4gICAgICAgIHNvcnQsXHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgIH07XHJcbiAgICB9KVxyXG4gICksXHJcblxyXG4gIGNoYW5nZURhdGFTb3J0OiAoZGF0YUxpc3QsIG9sZEluZGV4LCBuZXdJbmRleCkgPT4ge1xyXG4gICAgY29uc3QgZGF0YSA9IGRhdGFMaXN0LnRvSlMoKTtcclxuICAgIGxldCBjaGFuZ2VPdmVyTG9ja2VkSXRlbXMgPSBmYWxzZTtcclxuICAgIGlmIChvbGRJbmRleCArIDEgPCBuZXdJbmRleCkge1xyXG4gICAgICBmb3IgKGxldCBpID0gb2xkSW5kZXg7IGkgPCBuZXdJbmRleDsgaSArPSAxKSB7XHJcbiAgICAgICAgaWYgKGRhdGFbaV0gJiYgZGF0YVtpXS5pc0xvY2tlZCkge1xyXG4gICAgICAgICAgY2hhbmdlT3ZlckxvY2tlZEl0ZW1zID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChvbGRJbmRleCA+IG5ld0luZGV4ICsgMSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gb2xkSW5kZXg7IGkgPiBuZXdJbmRleDsgaSAtPSAxKSB7XHJcbiAgICAgICAgaWYgKGRhdGFbaV0gJiYgZGF0YVtpXS5pc0xvY2tlZCkge1xyXG4gICAgICAgICAgY2hhbmdlT3ZlckxvY2tlZEl0ZW1zID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGxldCBzb3J0ZWREYXRhID0gW107XHJcbiAgICBpZiAoY2hhbmdlT3ZlckxvY2tlZEl0ZW1zKSB7XHJcbiAgICAgIC8vIFN3YXAgaXRlbXMgaWYgc29ydGluZyBpcyBkb25lIG92ZXIgbG9ja2VkIGl0ZW0gdG8ga2VlcCBpdCBpbiBwbGFjZVxyXG4gICAgICBsZXQgaTtcclxuICAgICAgaSA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICB3aGlsZSAoaSA+IDApIHtcclxuICAgICAgICBpIC09IDE7XHJcbiAgICAgICAgc29ydGVkRGF0YVtpXSA9IGRhdGFbaV07XHJcbiAgICAgIH1cclxuICAgICAgc29ydGVkRGF0YVtvbGRJbmRleF0gPSBkYXRhW25ld0luZGV4XTtcclxuICAgICAgc29ydGVkRGF0YVtuZXdJbmRleF0gPSBkYXRhW29sZEluZGV4XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE5vcm1hbCBzb3J0aW5nIG1vdmUgYWxsIG90aGVyIGl0ZW1zIHVwL2Rvd25cclxuICAgICAgc29ydGVkRGF0YSA9IGFycmF5TW92ZShkYXRhLCBvbGRJbmRleCwgbmV3SW5kZXgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIExpc3Qoc29ydGVkRGF0YSk7XHJcbiAgfSxcclxuXHJcbiAgZmlsdGVyRGF0YTogKGRhdGEsIGtleXdvcmQpID0+IHtcclxuICAgIGxldCBmaWx0ZXJlZERhdGE7XHJcbiAgICBpZiAoa2V5d29yZCAhPT0gJycpIHtcclxuICAgICAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChlc2NhcGVLZXl3b3JkKGtleXdvcmQpLCAnaScpO1xyXG4gICAgICBmaWx0ZXJlZERhdGEgPSBkYXRhLmZpbHRlcihpID0+IHJlZ2V4cC50ZXN0KGkubGFiZWwpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZpbHRlcmVkRGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmlsdGVyZWREYXRhO1xyXG4gIH0sXHJcbn07XHJcbiJdfQ==